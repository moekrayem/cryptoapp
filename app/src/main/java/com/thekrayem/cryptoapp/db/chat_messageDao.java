package com.thekrayem.cryptoapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.thekrayem.cryptoapp.db.chat_message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE".
*/
public class chat_messageDao extends AbstractDao<chat_message, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE";

    /**
     * Properties of entity chat_message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Chat_message_id = new Property(0, Long.class, "chat_message_id", true, "CHAT_MESSAGE_ID");
        public final static Property Chat_message_content = new Property(1, String.class, "chat_message_content", false, "CHAT_MESSAGE_CONTENT");
        public final static Property Chat_message_mine = new Property(2, Boolean.class, "chat_message_mine", false, "CHAT_MESSAGE_MINE");
        public final static Property Chat_message_user_id = new Property(3, Long.class, "chat_message_user_id", false, "CHAT_MESSAGE_USER_ID");
        public final static Property Chat_message_time = new Property(4, Long.class, "chat_message_time", false, "CHAT_MESSAGE_TIME");
    };


    public chat_messageDao(DaoConfig config) {
        super(config);
    }
    
    public chat_messageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE\" (" + //
                "\"CHAT_MESSAGE_ID\" INTEGER PRIMARY KEY ," + // 0: chat_message_id
                "\"CHAT_MESSAGE_CONTENT\" TEXT," + // 1: chat_message_content
                "\"CHAT_MESSAGE_MINE\" INTEGER," + // 2: chat_message_mine
                "\"CHAT_MESSAGE_USER_ID\" INTEGER," + // 3: chat_message_user_id
                "\"CHAT_MESSAGE_TIME\" INTEGER);"); // 4: chat_message_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, chat_message entity) {
        stmt.clearBindings();
 
        Long chat_message_id = entity.getChat_message_id();
        if (chat_message_id != null) {
            stmt.bindLong(1, chat_message_id);
        }
 
        String chat_message_content = entity.getChat_message_content();
        if (chat_message_content != null) {
            stmt.bindString(2, chat_message_content);
        }
 
        Boolean chat_message_mine = entity.getChat_message_mine();
        if (chat_message_mine != null) {
            stmt.bindLong(3, chat_message_mine ? 1L: 0L);
        }
 
        Long chat_message_user_id = entity.getChat_message_user_id();
        if (chat_message_user_id != null) {
            stmt.bindLong(4, chat_message_user_id);
        }
 
        Long chat_message_time = entity.getChat_message_time();
        if (chat_message_time != null) {
            stmt.bindLong(5, chat_message_time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public chat_message readEntity(Cursor cursor, int offset) {
        chat_message entity = new chat_message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // chat_message_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chat_message_content
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // chat_message_mine
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // chat_message_user_id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // chat_message_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, chat_message entity, int offset) {
        entity.setChat_message_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChat_message_content(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChat_message_mine(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setChat_message_user_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setChat_message_time(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(chat_message entity, long rowId) {
        entity.setChat_message_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(chat_message entity) {
        if(entity != null) {
            return entity.getChat_message_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.thekrayem.cryptoapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.thekrayem.cryptoapp.db.file;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE".
*/
public class fileDao extends AbstractDao<file, Long> {

    public static final String TABLENAME = "FILE";

    /**
     * Properties of entity file.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property File_id = new Property(0, Long.class, "file_id", true, "FILE_ID");
        public final static Property File_encrypted_bytes = new Property(1, byte[].class, "file_encrypted_bytes", false, "FILE_ENCRYPTED_BYTES");
        public final static Property Hashed_pass = new Property(2, byte[].class, "hashed_pass", false, "HASHED_PASS");
        public final static Property Salt = new Property(3, byte[].class, "salt", false, "SALT");
        public final static Property Iv = new Property(4, byte[].class, "iv", false, "IV");
        public final static Property File_original_name = new Property(5, String.class, "file_original_name", false, "FILE_ORIGINAL_NAME");
        public final static Property File_encrypted_name = new Property(6, String.class, "file_encrypted_name", false, "FILE_ENCRYPTED_NAME");
        public final static Property File_path = new Property(7, String.class, "file_path", false, "FILE_PATH");
        public final static Property Iterations = new Property(8, Integer.class, "iterations", false, "ITERATIONS");
        public final static Property Key_length = new Property(9, Integer.class, "key_length", false, "KEY_LENGTH");
        public final static Property Is_chat = new Property(10, Boolean.class, "is_chat", false, "IS_CHAT");
        public final static Property File_hash = new Property(11, byte[].class, "file_hash", false, "FILE_HASH");
    };


    public fileDao(DaoConfig config) {
        super(config);
    }
    
    public fileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE\" (" + //
                "\"FILE_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: file_id
                "\"FILE_ENCRYPTED_BYTES\" BLOB," + // 1: file_encrypted_bytes
                "\"HASHED_PASS\" BLOB," + // 2: hashed_pass
                "\"SALT\" BLOB," + // 3: salt
                "\"IV\" BLOB," + // 4: iv
                "\"FILE_ORIGINAL_NAME\" TEXT," + // 5: file_original_name
                "\"FILE_ENCRYPTED_NAME\" TEXT," + // 6: file_encrypted_name
                "\"FILE_PATH\" TEXT," + // 7: file_path
                "\"ITERATIONS\" INTEGER," + // 8: iterations
                "\"KEY_LENGTH\" INTEGER," + // 9: key_length
                "\"IS_CHAT\" INTEGER," + // 10: is_chat
                "\"FILE_HASH\" BLOB);"); // 11: file_hash
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, file entity) {
        stmt.clearBindings();
 
        Long file_id = entity.getFile_id();
        if (file_id != null) {
            stmt.bindLong(1, file_id);
        }
 
        byte[] file_encrypted_bytes = entity.getFile_encrypted_bytes();
        if (file_encrypted_bytes != null) {
            stmt.bindBlob(2, file_encrypted_bytes);
        }
 
        byte[] hashed_pass = entity.getHashed_pass();
        if (hashed_pass != null) {
            stmt.bindBlob(3, hashed_pass);
        }
 
        byte[] salt = entity.getSalt();
        if (salt != null) {
            stmt.bindBlob(4, salt);
        }
 
        byte[] iv = entity.getIv();
        if (iv != null) {
            stmt.bindBlob(5, iv);
        }
 
        String file_original_name = entity.getFile_original_name();
        if (file_original_name != null) {
            stmt.bindString(6, file_original_name);
        }
 
        String file_encrypted_name = entity.getFile_encrypted_name();
        if (file_encrypted_name != null) {
            stmt.bindString(7, file_encrypted_name);
        }
 
        String file_path = entity.getFile_path();
        if (file_path != null) {
            stmt.bindString(8, file_path);
        }
 
        Integer iterations = entity.getIterations();
        if (iterations != null) {
            stmt.bindLong(9, iterations);
        }
 
        Integer key_length = entity.getKey_length();
        if (key_length != null) {
            stmt.bindLong(10, key_length);
        }
 
        Boolean is_chat = entity.getIs_chat();
        if (is_chat != null) {
            stmt.bindLong(11, is_chat ? 1L: 0L);
        }
 
        byte[] file_hash = entity.getFile_hash();
        if (file_hash != null) {
            stmt.bindBlob(12, file_hash);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public file readEntity(Cursor cursor, int offset) {
        file entity = new file( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // file_id
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1), // file_encrypted_bytes
            cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2), // hashed_pass
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // salt
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // iv
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // file_original_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // file_encrypted_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // file_path
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // iterations
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // key_length
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // is_chat
            cursor.isNull(offset + 11) ? null : cursor.getBlob(offset + 11) // file_hash
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, file entity, int offset) {
        entity.setFile_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFile_encrypted_bytes(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
        entity.setHashed_pass(cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2));
        entity.setSalt(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setIv(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setFile_original_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFile_encrypted_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFile_path(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIterations(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setKey_length(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIs_chat(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setFile_hash(cursor.isNull(offset + 11) ? null : cursor.getBlob(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(file entity, long rowId) {
        entity.setFile_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(file entity) {
        if(entity != null) {
            return entity.getFile_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.thekrayem.cryptoapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.thekrayem.cryptoapp.db.chat_user;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_USER".
*/
public class chat_userDao extends AbstractDao<chat_user, Long> {

    public static final String TABLENAME = "CHAT_USER";

    /**
     * Properties of entity chat_user.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Chat_user_id = new Property(0, Long.class, "chat_user_id", true, "CHAT_USER_ID");
        public final static Property Chat_user_their_instance_id = new Property(1, String.class, "chat_user_their_instance_id", false, "CHAT_USER_THEIR_INSTANCE_ID");
        public final static Property Chat_user_name = new Property(2, String.class, "chat_user_name", false, "CHAT_USER_NAME");
        public final static Property Chat_user_my_key_bytes = new Property(3, byte[].class, "chat_user_my_key_bytes", false, "CHAT_USER_MY_KEY_BYTES");
        public final static Property Chat_user_their_key_bytes = new Property(4, byte[].class, "chat_user_their_key_bytes", false, "CHAT_USER_THEIR_KEY_BYTES");
        public final static Property Chat_user_my_key_index = new Property(5, Integer.class, "chat_user_my_key_index", false, "CHAT_USER_MY_KEY_INDEX");
        public final static Property Chat_user_their_key_index = new Property(6, Integer.class, "chat_user_their_key_index", false, "CHAT_USER_THEIR_KEY_INDEX");
    };


    public chat_userDao(DaoConfig config) {
        super(config);
    }
    
    public chat_userDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_USER\" (" + //
                "\"CHAT_USER_ID\" INTEGER PRIMARY KEY ," + // 0: chat_user_id
                "\"CHAT_USER_THEIR_INSTANCE_ID\" TEXT," + // 1: chat_user_their_instance_id
                "\"CHAT_USER_NAME\" TEXT," + // 2: chat_user_name
                "\"CHAT_USER_MY_KEY_BYTES\" BLOB," + // 3: chat_user_my_key_bytes
                "\"CHAT_USER_THEIR_KEY_BYTES\" BLOB," + // 4: chat_user_their_key_bytes
                "\"CHAT_USER_MY_KEY_INDEX\" INTEGER," + // 5: chat_user_my_key_index
                "\"CHAT_USER_THEIR_KEY_INDEX\" INTEGER);"); // 6: chat_user_their_key_index
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, chat_user entity) {
        stmt.clearBindings();
 
        Long chat_user_id = entity.getChat_user_id();
        if (chat_user_id != null) {
            stmt.bindLong(1, chat_user_id);
        }
 
        String chat_user_their_instance_id = entity.getChat_user_their_instance_id();
        if (chat_user_their_instance_id != null) {
            stmt.bindString(2, chat_user_their_instance_id);
        }
 
        String chat_user_name = entity.getChat_user_name();
        if (chat_user_name != null) {
            stmt.bindString(3, chat_user_name);
        }
 
        byte[] chat_user_my_key_bytes = entity.getChat_user_my_key_bytes();
        if (chat_user_my_key_bytes != null) {
            stmt.bindBlob(4, chat_user_my_key_bytes);
        }
 
        byte[] chat_user_their_key_bytes = entity.getChat_user_their_key_bytes();
        if (chat_user_their_key_bytes != null) {
            stmt.bindBlob(5, chat_user_their_key_bytes);
        }
 
        Integer chat_user_my_key_index = entity.getChat_user_my_key_index();
        if (chat_user_my_key_index != null) {
            stmt.bindLong(6, chat_user_my_key_index);
        }
 
        Integer chat_user_their_key_index = entity.getChat_user_their_key_index();
        if (chat_user_their_key_index != null) {
            stmt.bindLong(7, chat_user_their_key_index);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public chat_user readEntity(Cursor cursor, int offset) {
        chat_user entity = new chat_user( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // chat_user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chat_user_their_instance_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chat_user_name
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // chat_user_my_key_bytes
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // chat_user_their_key_bytes
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // chat_user_my_key_index
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // chat_user_their_key_index
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, chat_user entity, int offset) {
        entity.setChat_user_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChat_user_their_instance_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChat_user_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChat_user_my_key_bytes(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setChat_user_their_key_bytes(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setChat_user_my_key_index(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setChat_user_their_key_index(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(chat_user entity, long rowId) {
        entity.setChat_user_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(chat_user entity) {
        if(entity != null) {
            return entity.getChat_user_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
